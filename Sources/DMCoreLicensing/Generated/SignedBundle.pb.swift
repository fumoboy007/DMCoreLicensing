// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SignedBundle.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// MIT License
//
// Copyright Â© 2019 Darren Mo.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SignedBundle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var publicKeyType: SignedBundle.PublicKeyType = .pkcs1Rsa4096

  var publicKey: Data = Data()

  var signatureAlgorithm: SignedBundle.SignatureAlgorithm = .rsaPssSha512

  var signature: Data = Data()

  var signedMessage: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PublicKeyType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case pkcs1Rsa4096 // = 0
    case UNRECOGNIZED(Int)

    init() {
      self = .pkcs1Rsa4096
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .pkcs1Rsa4096
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .pkcs1Rsa4096: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum SignatureAlgorithm: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case rsaPssSha512 // = 0
    case UNRECOGNIZED(Int)

    init() {
      self = .rsaPssSha512
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .rsaPssSha512
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .rsaPssSha512: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension SignedBundle.PublicKeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignedBundle.PublicKeyType] = [
    .pkcs1Rsa4096,
  ]
}

extension SignedBundle.SignatureAlgorithm: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SignedBundle.SignatureAlgorithm] = [
    .rsaPssSha512,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SignedBundle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SignedBundle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key_type"),
    2: .standard(proto: "public_key"),
    3: .standard(proto: "signature_algorithm"),
    4: .same(proto: "signature"),
    5: .standard(proto: "signed_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.publicKeyType) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.signatureAlgorithm) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.signedMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.publicKeyType != .pkcs1Rsa4096 {
      try visitor.visitSingularEnumField(value: self.publicKeyType, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 2)
    }
    if self.signatureAlgorithm != .rsaPssSha512 {
      try visitor.visitSingularEnumField(value: self.signatureAlgorithm, fieldNumber: 3)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 4)
    }
    if !self.signedMessage.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedMessage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SignedBundle, rhs: SignedBundle) -> Bool {
    if lhs.publicKeyType != rhs.publicKeyType {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.signatureAlgorithm != rhs.signatureAlgorithm {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.signedMessage != rhs.signedMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SignedBundle.PublicKeyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PUBLIC_KEY_TYPE_PKCS1_RSA_4096"),
  ]
}

extension SignedBundle.SignatureAlgorithm: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIGNATURE_ALGORITHM_RSA_PSS_SHA512"),
  ]
}
